package com.example.demo.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.example.demo.entity.CompanyProfile;
import com.example.demo.entity.CompanyStockHistory;
import com.example.demo.entity.Stock;
import com.example.demo.entity.StockQuote;
import com.example.demo.exception.ResourceNotFoundException;
import com.example.demo.exception.ServiceException;
import com.example.demo.feignclient.StockClient;
import com.example.demo.repository.AllStockDataRepo;
import com.example.demo.repository.CompanyProfileRepo;

@Service
public class StockServiceImpl implements StockService {

	@Autowired
	private StockClient stockClient;

	@Value("${stock.api.key}")
	private String apiKey;

	@Autowired
	private AllStockDataRepo stockRepository;

	@Autowired
	private CompanyProfileRepo companyProfileRepo;

	@Override
	public void fetchAndSaveAllStocks() {
		try {
			List<Stock> stocks = stockClient.getAllStocks(apiKey);
			stockRepository.saveAll(stocks);
		} catch (Exception e) {
			throw new ServiceException("Failed to fetch and save all stocks", e);
		}
	}

	@Override
	public List<Stock> getAllStockInExchnage(String exchange) {
		try {
			return stockRepository.findByExchangeShortName(exchange);
		} catch (Exception e) {
			throw new ServiceException("Failed to fetch stocks for exchange: " + exchange, e);
		}
	}

	@Override
	public CompanyProfile getCompanyProfile(String ticker) {
		try {
			List<CompanyProfile> companyProfiles = stockClient.getCompanyProfile(ticker, "kapil");
			if (companyProfiles == null || companyProfiles.isEmpty()) {
				throw new ResourceNotFoundException("Company profile not found for ticker: " + ticker);
			}
			companyProfileRepo.save(companyProfiles.get(0));
			return companyProfileRepo.findBySymbol(ticker);
		} catch (ResourceNotFoundException e) {
			throw e;
		} catch (Exception e) {
			throw new ServiceException("Failed to fetch company profile for ticker: " + ticker, e);
		}
	}

	@Override
	public StockQuote getCompanyStockQuote(String ticker) {
		try {
			List<StockQuote> quotes = stockClient.getCompanyStockQuote(ticker, apiKey);
			if (quotes == null || quotes.isEmpty()) {
				throw new ResourceNotFoundException("Stock quote not found for ticker: " + ticker);
			}
			return quotes.get(0);
		} catch (ResourceNotFoundException e) {
			throw e;
		} catch (Exception e) {
			throw new ServiceException("Failed to fetch stock quote for ticker: " + ticker, e);
		}
	}

	@Override
	public CompanyStockHistory getCompanyStockHistory(String ticker) {
		try {
			CompanyStockHistory history = stockClient.getCompanyStockHistory(ticker, apiKey);
			if (history == null) {
				throw new ResourceNotFoundException("Stock history not found for ticker: " + ticker);
			}
			return history;
		} catch (ResourceNotFoundException e) {
			throw e;
		} catch (Exception e) {
			throw new ServiceException("Failed to fetch stock history for ticker: " + ticker, e);
		}
	}
}
