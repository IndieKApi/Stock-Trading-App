package com.example.demo;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyList;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.context.SpringBootTest;

import com.example.demo.entity.CompanyProfile;
import com.example.demo.entity.CompanyStockHistory;
import com.example.demo.entity.Stock;
import com.example.demo.entity.StockQuote;
import com.example.demo.feignclient.StockClient;
import com.example.demo.repository.AllStockDataRepo;
import com.example.demo.service.StockServiceImpl;

@SpringBootTest
class StockMicroserviceApplicationTests {

	

	@Mock
	private StockClient stockClient;

	@Mock
	private AllStockDataRepo stockRepository;

	@InjectMocks
	private StockServiceImpl stockService;

	@BeforeEach
	void setUp() {
		MockitoAnnotations.openMocks(this);
	}

	@Test
	void testFetchAndSaveAllStocks() {
	    List<Stock> nasdaqStocks = Arrays.asList(
	        new Stock(1, "AAPL", "Apple Inc.", 130.0, "NASDAQ", "NASDAQ", "Common Stock")
	    );

	    when(stockClient.getAllStocks(anyString())).thenReturn(nasdaqStocks);
	    when(stockRepository.findBySymbol(anyString())).thenReturn(Optional.empty());

	    String result = stockService.fetchAndSaveAllStocks();

	    assertEquals("All NASDAQ Stocks Saved/Updated in Database", result);
	    verify(stockRepository, times(1)).save(any(Stock.class));
	}


	@Test
	void testGetAllStockInExchange() {
	    List<Stock> stocks = Arrays.asList(
	        new Stock(1, "AAPL", "Apple Inc.", 130.0, "NASDAQ", "NASDAQ", "Common Stock")
	    );

	    when(stockRepository.findByExchangeShortName(anyString())).thenReturn(stocks);

	    List<Stock> result = stockService.getAllStockInExchnage("NASDAQ");

	    assertEquals(1, result.size());
	    verify(stockRepository, times(1)).findByExchangeShortName("NASDAQ");
	}


	@Test
	void testGetCompanyProfile() {
		CompanyProfile profile = new CompanyProfile();
		profile.setSymbol("AAPL");
		List<CompanyProfile> profiles = Arrays.asList(profile);

		when(stockClient.getCompanyProfile(anyString(), anyString())).thenReturn(profiles);

		CompanyProfile result = stockService.getCompanyProfile("AAPL");

		assertEquals("AAPL", result.getSymbol());

	}

	@Test
	void testGetCompanyStockQuote() {
		StockQuote quote = new StockQuote();
		quote.setSymbol("AAPL");
		List<StockQuote> quotes = Arrays.asList(quote);

		when(stockClient.getCompanyStockQuote(anyString(), anyString())).thenReturn(quotes);

		StockQuote result = stockService.getCompanyStockQuote("AAPL");

		assertEquals("AAPL", result.getSymbol());
	}

	@Test
	void testGetCompanyStockHistory() {
		CompanyStockHistory history = new CompanyStockHistory();
		when(stockClient.getCompanyStockHistory(anyString(), anyString())).thenReturn(history);

		CompanyStockHistory result = stockService.getCompanyStockHistory("AAPL");

		assertNotNull(result);
	}

}
